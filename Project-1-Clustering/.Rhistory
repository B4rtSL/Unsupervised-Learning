################################################################################
#########################  Maria Kubara MA #####################################
########################## RIntro 2023/24 ######################################
############################ Class 2 ###########################################
################################################################################
# changing the language to English
Sys.setlocale("LC_ALL","English")
Sys.setenv(LANGUAGE='en')
################################################################################
# Reminder:
# commenting with a hash symbol
# function(argument1, argument2, argument3, ...)
a <- "assigning value to a variable"
b = "alternative way of assigning values"
c <- 2
d = 3
a
b
c
d
### Data types #################################################################
### Numeric ####################################################################
# basic type for numerical data
a <- 1.5
a
class(a) # check the class (type) of variable a
b <- 10
b
class(b) # check the class (type) of variable b
### Integer ####################################################################
# 'special' type of numerical data - integers
a <- as.integer(5) # in order to create a variable with 'integer' type you need to force it
class(a)
is.integer(a) # check if a is an integer
is.numeric(a) # check if a is a numeric
# integer is a subclass of numeric
b <- 6.89
b
class(b)
b <- as.integer(b) # converting the current b type to the integer
b # converting the numeric type to integer will remove the decimal part
### Logical ####################################################################
# Datatype storing logical information - true-false
# True values in R: TRUE, T, 1
# False values in R: FALSE, F, 0
a <- 5; b <- 3 # we can run two operations in one line, dividing them with a semicolon
z = a < b # z will be the result of the operation checking if a is smaller than b
z
class(z)
# Logical operators
# & (and) conjunction
# | (or) alternative
# ! (not) negation
a <- TRUE
b <- FALSE
a & a
a & b
a | a
a | b
b | b
!a
!b
### Character ##################################################################
# Datatype for storing text values.
# In other languages (R) character is the equivalent of string.
# Character data in R are shown within quotation symbols.
a <- "z"
b <- "Longer text with spaces."
class(a)
class(b)
c <- "9.66"
c # look at the quotation signs when printing this value
class(c)
is.numeric(c)
as.numeric(c) # Only after converting to the numeric quotations are disappearing
as.numeric(b) # Converting text to the numeric makes no sense - it will produce empty values NA
### Date #######################################################################
# There are many possibilities for date processing in R. The most basic one is
# as.Date() function for Date class. Dates are stored as number of days since
# 1970-01-01, with negative values for earlier dates. This format stores date-only data.
dates1 <- c("2022-08-18", "1998-01-30", "2020-03-18")
class(dates1)
as.numeric(dates1) # this is only text data - NAs created
# using as.Date() function
dates1.Date <- as.Date(dates1)
class(dates1.Date)
as.numeric(dates1.Date) # conversion to number is possible now
dates1.Date - as.Date("1970-01-01")
# date format is specified with a formatting code from format() function
# for Date specific abbreviations check ?strftime() documentation
dates2 <- c("11/20/80", "11/20/91", "11/20/1993", "09/10/93")
dates2.Date <- as.Date(dates2)
2+3
a = 5
c = 3
a+c
class(8.0)
class(8)
is.integer(8)
################################################################################
#########################  Maria Kubara MA #####################################
########################## RIntro 2023/24 ######################################
############################ Class 2 ###########################################
################################################################################
# changing the language to English
Sys.setlocale("LC_ALL","English")
Sys.setenv(LANGUAGE='en')
################################################################################
# Reminder:
# commenting with a hash symbol
# function(argument1, argument2, argument3, ...)
a <- "assigning value to a variable"
b = "alternative way of assigning values"
c <- 2
d = 3
a
b
c
d
### Data types #################################################################
### Numeric ####################################################################
# basic type for numerical data
a <- 1.5
a
class(a) # check the class (type) of variable a
b <- 10
b
class(b) # check the class (type) of variable b
### Integer ####################################################################
# 'special' type of numerical data - integers
a <- as.integer(5) # in order to create a variable with 'integer' type you need to force it
class(a)
is.integer(a) # check if a is an integer
is.numeric(a) # check if a is a numeric
# integer is a subclass of numeric
b <- 6.89
b
class(b)
b <- as.integer(b) # converting the current b type to the integer
b # converting the numeric type to integer will remove the decimal part
### Logical ####################################################################
# Datatype storing logical information - true-false
# True values in R: TRUE, T, 1
# False values in R: FALSE, F, 0
a <- 5; b <- 3 # we can run two operations in one line, dividing them with a semicolon
z = a < b # z will be the result of the operation checking if a is smaller than b
z
class(z)
# Logical operators
# & (and) conjunction
# | (or) alternative
# ! (not) negation
a <- TRUE
b <- FALSE
a & a
a & b
a | a
a | b
b | b
!a
!b
### Character ##################################################################
# Datatype for storing text values.
# In other languages (R) character is the equivalent of string.
# Character data in R are shown within quotation symbols.
a <- "z"
b <- "Longer text with spaces."
class(a)
class(b)
c <- "9.66"
c # look at the quotation signs when printing this value
class(c)
is.numeric(c)
as.numeric(c) # Only after converting to the numeric quotations are disappearing
as.numeric(b) # Converting text to the numeric makes no sense - it will produce empty values NA
### Date #######################################################################
# There are many possibilities for date processing in R. The most basic one is
# as.Date() function for Date class. Dates are stored as number of days since
# 1970-01-01, with negative values for earlier dates. This format stores date-only data.
dates1 <- c("2022-08-18", "1998-01-30", "2020-03-18")
class(dates1)
as.numeric(dates1) # this is only text data - NAs created
# using as.Date() function
dates1.Date <- as.Date(dates1)
class(dates1.Date)
as.numeric(dates1.Date) # conversion to number is possible now
dates1.Date - as.Date("1970-01-01")
# date format is specified with a formatting code from format() function
# for Date specific abbreviations check ?strftime() documentation
dates2 <- c("11/20/80", "11/20/91", "11/20/1993", "09/10/93")
dates2.Date <- as.Date(dates2)
int
num <- 3.45
int <- as.integer(num)
int
num <- 3.45
int <- as.integer(num)
cint <- as.char(int)
num <- 3.45
int <- as.integer(num)
cint <- as.character(int)
num <- 3.45
int <- as.integer(num)
cint <- as.character(int)
cint
num <- 3.45
num
int <- as.integer(num)
cint
cint <- as.character(int)
cint
num <- 3.45
num
int <- as.integer(num)
int
cint <- as.character(int)
cint
text1 <- 'text1'
text2 <- 'text2'
paste1 = paste(text1, text2)
paste
setwd("D:/Git-Management/Unsupervised-Learning/Project-1-Clustering")
Sys.setlocale("LC_ALL","English")
Sys.setenv(LANGUAGE='en')
library(ggplot2)
library(factoextra)
library(flexclust)
library(fpc)
library(clustertend)
library(cluster)
library(ClusterR)
library(hopkins)
library(NbClust)
library(tidyverse)
data<-read.csv('nba_2022-23_akk_stats_with_salary.csv')
data<-read.csv('nba_2022-23_all_stats_with_salary.csv')
head(data)
print(anyNA(data))
str(data)
?get_clust_tendency
get_clust_tendency(data, 2, graph=FALSE)
hopkins(data)
View(data)
stats <- data[c(3, 9:52)]
stats
stats <- data[c(7:52)]
scale(stats)
scaled_stats <- scale(stats)
get_clust_tendency(scaled_stats, 2, graph=FALSE)
hopkins(scaled_stats)
get_clust_tendency(scaled_stats, 2, graph=T)
